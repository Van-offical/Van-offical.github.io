<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哲学主义青年&#39;s Blog</title>
  
  <subtitle>只是一个博客而已</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-07T15:15:35.474Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>哲学主义青年</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法分析1</title>
    <link href="http://example.com/posts/28db5cb0.html"/>
    <id>http://example.com/posts/28db5cb0.html</id>
    <published>2022-11-05T11:57:56.000Z</published>
    <updated>2022-11-07T15:15:35.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="递归思想应用"><a href="#递归思想应用" class="headerlink" title="递归思想应用"></a>递归思想应用</h1><p><img src="https://cdn.staticaly.com/gh/Van-offical/ImgStore@main/73941412_p0.jpg"></p><hr><h2 id="问题描述-求一个算法-N个数-用其中M个任意组合相加等于一个已知数X-得出这M个数是哪些数"><a href="#问题描述-求一个算法-N个数-用其中M个任意组合相加等于一个已知数X-得出这M个数是哪些数" class="headerlink" title="问题描述:求一个算法:N个数 用其中M个任意组合相加等于一个已知数X 得出这M个数是哪些数"></a><strong>问题描述:求一个算法:N个数 用其中M个任意组合相加等于一个已知数X 得出这M个数是哪些数</strong></h2><p><strong>问题举例: seq = [1, 2, 3, 4, 5, 6, 7, 8, 9] s = 14 则全部可能的数字组合有: 5+9, 6+8 1+4+9, 1+5+8, 1+6+7, 2+3+9, 2+4+8, 2+5+7, 3+4+7, 3+5+6 1+2+5+6, 1+3+4+6, 1+2+4+7, 1+2+3+8, 2+3+4+5 共计15种</strong></p><hr><h1 id="以下是我的理解方式"><a href="#以下是我的理解方式" class="headerlink" title="以下是我的理解方式:"></a>以下是我的理解方式:</h1><p><strong>首先</strong>，按照我们做小学数学题的那种思想，就是从第一个数字开始，分别与后面的数字相加，<strong>如果相加的结果等于X</strong>，则输出组合，然后弹出一个数字，切换至下一个数字判断；<strong>如果相加数字小于X</strong>，则继续与后面的数字累加；<strong>如果大于X</strong>，则当前组合不符合条件，弹出这个数字，使用下一个数字；若此时全部数字已经使用完毕的情况下仍然不符合条件，则继续弹出<strong>这个数字的上一个数字</strong>，回到上一步判断，直至所有数字判断完毕<br><em>话说这样描述出来感觉用堆来做会不会很容易啊</em><br><em><del>改天用堆去做做试试</del></em><br>扯远了，从我的描述来看，其实是挺难懂的 <em><del>自己口才不好，高考语文才考了一百零几</del></em> 又扯远了，不如我来画个流程图吧！！！<br><strong>流程图如下：</strong></p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TB    开始 --&gt; 新数字进入    新数字进入 --&gt; 与原来的数字累加求和    与原来的数字累加求和 --和大于判断条件--&gt; 退出一个数    与原来的数字累加求和 --和小于判断条件--&gt; 新数字进入    与原来的数字累加求和 --和等于判断条件--&gt; 输出此时数组    输出此时数组 --&gt; 退出一个数    退出一个数 --数组不为空且存在未遍历的新数字--&gt; 新数字进入    退出一个数 --数组不为空且不存在未遍历的新数字--&gt; 退出一个数    退出一个数 --数组为空且不存在未遍历的新数字--&gt; 结束  </pre></div><p><del><em>为什么我写的流程图也看着这么烂啊啊啊啊！！！</em></del><br>总之，就差不多这个意思！<strong>接下来看看代码</strong> ，我是用递归的形式写的 <em>（作业要求）</em> ，有点难懂：</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Counts</span>(<span class="params">data_list, <span class="built_in">max</span> , temp=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">global</span> Count                        <span class="comment">#计数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data_list)==<span class="number">0</span>:               <span class="comment">#判断是否有后续数据 若无则返回上一层并执行上层后续语句 </span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> data_list[<span class="number">0</span>] == <span class="built_in">max</span>:             <span class="comment">#情况一：此时为单独数字遍历阶段 数组内数据正好等于max 计数+1 输出一个数字   </span></span><br><span class="line">        Count+=<span class="number">1</span>                        <span class="comment">#情况二：此时max等于上一层max减去上一层遍历的元素 若此时遍历元素等于max 则证明符合条件 计数+1 若不符合 则继续向后(或向前)遍历</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span>+<span class="built_in">str</span>(Count)+<span class="string">&#x27;种:&#x27;</span>+temp + <span class="built_in">str</span>(data_list[<span class="number">0</span>]))                                   </span><br><span class="line">    Counts(data_list[<span class="number">1</span>:], <span class="built_in">max</span>, temp)    <span class="comment">#情况一遍历：判断数组内是否有符合条件的单独数据                             </span></span><br><span class="line">    Counts(data_list[<span class="number">1</span>:], <span class="built_in">max</span>-data_list[<span class="number">0</span>], <span class="built_in">str</span>(data_list[<span class="number">0</span>]) + <span class="string">&#x27;+&#x27;</span> + temp)</span><br><span class="line">                                        <span class="comment">#情况二遍历：将max减去当前元素(当前元素累加) 判断后续元素累加情况</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data_list = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>]</span><br><span class="line">    Count=<span class="number">0</span></span><br><span class="line">    Counts(data_list , <span class="number">10</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em>看着还是挺简单的是吧</em><br><em>但是其实我当时理解了好久</em><br>先一句一句来看吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Counts</span>(<span class="params">data_list, <span class="built_in">max</span> , temp=<span class="string">&#x27;&#x27;</span></span>):</span><br></pre></td></tr></table></figure><p>定义了一个函数Counts <del><em>废话</em></del> 有三个输入变量data_list(全部数字)，max(判断条件)，temp(后面会讲)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Counts</span>(<span class="params">data_list, <span class="built_in">max</span> , temp=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">  <span class="keyword">global</span> Count                        <span class="comment">#计数</span></span><br></pre></td></tr></table></figure><p>使用了一个全局变量Count，用来计算符合条件的数组个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Counts</span>(<span class="params">data_list, <span class="built_in">max</span> , temp=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">global</span> Count                        <span class="comment">#计数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data_list)==<span class="number">0</span>:               <span class="comment">#判断是否有后续数据 若无则返回上一层并执行上层后续语句 </span></span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>这里对应流程图中判断数组是否为空的步骤 <em>（至于为什么写在这里 我只能说先看完后面的代码就能理解了）</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Counts</span>(<span class="params">data_list, <span class="built_in">max</span> , temp=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">global</span> Count                        <span class="comment">#计数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data_list)==<span class="number">0</span>:               <span class="comment">#判断是否有后续数据 若无则返回上一层并执行上层后续语句 </span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> data_list[<span class="number">0</span>] == <span class="built_in">max</span>:             <span class="comment">#情况一：此时为单独数字遍历阶段 数组内数据正好等于max 计数+1 输出一个数字   </span></span><br><span class="line">        Count+=<span class="number">1</span>                        <span class="comment">#情况二：此时max等于上一层max减去上一层遍历的元素 若此时遍历元素等于max 则证明符合条件 计数+1 若不符合 则继续向后(或向前)遍历</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span>+<span class="built_in">str</span>(Count)+<span class="string">&#x27;种:&#x27;</span>+temp + <span class="built_in">str</span>(data_list[<span class="number">0</span>]))           </span><br></pre></td></tr></table></figure><p>这里对应的是流程图中判断此时累加和是否等于判断条件的步骤<br>print打印的就是结果<br>temp变量存储了此时已经累加的数据(用于输出，不包括最后一个数字，所以要加上)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Counts</span>(<span class="params">data_list, <span class="built_in">max</span> , temp=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">global</span> Count                        <span class="comment">#计数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data_list)==<span class="number">0</span>:               <span class="comment">#判断是否有后续数据 若无则返回上一层并执行上层后续语句 </span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> data_list[<span class="number">0</span>] == <span class="built_in">max</span>:             <span class="comment">#情况一：此时为单独数字遍历阶段 数组内数据正好等于max 计数+1 输出一个数字   </span></span><br><span class="line">        Count+=<span class="number">1</span>                        <span class="comment">#情况二：此时max等于上一层max减去上一层遍历的元素 若此时遍历元素等于max 则证明符合条件 计数+1 若不符合 则继续向后(或向前)遍历</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span>+<span class="built_in">str</span>(Count)+<span class="string">&#x27;种:&#x27;</span>+temp + <span class="built_in">str</span>(data_list[<span class="number">0</span>]))</span><br><span class="line">    Counts(data_list[<span class="number">1</span>:], <span class="built_in">max</span>, temp)    <span class="comment">#情况一遍历：判断数组内是否有符合条件的单独数据                                        </span></span><br></pre></td></tr></table></figure><p>这里开始了遍历，为了说明白，把后面的代码一起都拿上来讲吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Counts</span>(<span class="params">data_list, <span class="built_in">max</span> , temp=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">global</span> Count                        <span class="comment">#计数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data_list)==<span class="number">0</span>:               <span class="comment">#判断是否有后续数据 若无则返回上一层并执行上层后续语句 </span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> data_list[<span class="number">0</span>] == <span class="built_in">max</span>:             <span class="comment">#情况一：此时为单独数字遍历阶段 数组内数据正好等于max 计数+1 输出一个数字   </span></span><br><span class="line">        Count+=<span class="number">1</span>                        <span class="comment">#情况二：此时max等于上一层max减去上一层遍历的元素 若此时遍历元素等于max 则证明符合条件 计数+1 若不符合 则继续向后(或向前)遍历</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span>+<span class="built_in">str</span>(Count)+<span class="string">&#x27;种:&#x27;</span>+temp + <span class="built_in">str</span>(data_list[<span class="number">0</span>]))                                   </span><br><span class="line">    Counts(data_list[<span class="number">1</span>:], <span class="built_in">max</span>, temp)    <span class="comment">#情况一遍历：判断数组内是否有符合条件的单独数据                             </span></span><br><span class="line">    Counts(data_list[<span class="number">1</span>:], <span class="built_in">max</span>-data_list[<span class="number">0</span>], <span class="built_in">str</span>(data_list[<span class="number">0</span>]) + <span class="string">&#x27;+&#x27;</span> + temp)</span><br><span class="line">                                        <span class="comment">#情况二遍历：将max减去当前元素(当前元素累加) 判断后续元素累加情况</span></span><br></pre></td></tr></table></figure><p>我们来模拟一下机器运行时的场景 <em>（血肉苦弱，机械飞升）</em> ，以输入数据[1, 2, 3]，判断条件6为例：<br>    1. 首先data_list = [1, 2, 3]，max = 6，temp初始是空值，Count是计数用的，初始为0<br>    2. 第一个if判断data_list长度，不为0，if内语句不执行<br>    3. 第二个if判断data_list中第一个元素是否等于max，此时该元素为1，max为6，if不执行<br>    4. 然后进入第一层递归，data_list为原list的第二个元素开始，为[2, 3, 4]，max仍然为6，temp仍然是空值<br>    5. 接下来逻辑与上面一样：判断两个if，然后又进入一层递归，此时data_list为第二层list的第二个元素开始，为[3, 4]，max与temp仍然相同<br> 之后的相同步骤不再赘述，直到data_list中只剩最后一个元素时，此时再进入递归，这一层递归的逻辑就发生了变化；前面的步骤相当于分别把每个元素与max判断了一遍，用于查找是否有单个元素直接与max相等 <em>（本例暂时无这种情况）</em> ，当判断完全部元素后，此时data_list的长度为0 <em>（为空）</em> 根据第一个if的判断条件，第一个if内部语句被执行 <em>（return）</em> 我们又回到了上一层递归中，此时data_list内的元素为3，max为6，代码已经执行完了<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Counts(data_list[<span class="number">1</span>:], <span class="built_in">max</span>, temp)</span><br></pre></td></tr></table></figure><br>这一句，并且这一句没有返回值 <em>（刚才的return语句）</em>，之后执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Counts(data_list[<span class="number">1</span>:], <span class="built_in">max</span>-data_list[<span class="number">0</span>], <span class="built_in">str</span>(data_list[<span class="number">0</span>]) + <span class="string">&#x27;+&#x27;</span> + temp)</span><br></pre></td></tr></table></figure><p>这里是相当于把本层data_list <em>（这里为[3]）</em> 中第二个元素开始直到末尾的数组作为函数的参数，而max为本层原max <em>（这里为6）</em> 减去本层数组的第一个元素 <em>（这里为3）</em> 换句话来说，这里是用了一个与累加相反的运算方式，让max分别减去数组中的元素直到找到累减过后为0的组合<em>在看过后续的步骤后，其实就好理解为什么这么做了</em>然后我们用data_list[0]与temp相加，即将该数据存储起来，以便后面输出组合</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;递归思想应用&quot;&gt;&lt;a href=&quot;#递归思想应用&quot; class=&quot;headerlink&quot; title=&quot;递归思想应用&quot;&gt;&lt;/a&gt;递归思想应用&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.staticaly.com/gh/Van-offical/Img</summary>
      
    
    
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>欢迎</title>
    <link href="http://example.com/posts/edc6676d.html"/>
    <id>http://example.com/posts/edc6676d.html</id>
    <published>2022-10-08T09:29:29.000Z</published>
    <updated>2022-11-05T12:03:42.190Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客!!!"></a>欢迎来到我的博客!!!</h1><p><strong>所以我该写些什么？？？</strong><br>要不先在这里插一张图片吧！！！</p><hr><p><img src="https://cdn.staticaly.com/gh/Van-offical/ImgStore@main/pics04.jpg"></p><hr><p><strong>如你所见 我是舰长！</strong><del><em>骄傲</em></del></p><h2 id="总而言之-谢谢你点进来！！！"><a href="#总而言之-谢谢你点进来！！！" class="headerlink" title="总而言之 谢谢你点进来！！！"></a>总而言之 谢谢你点进来！！！</h2><div class="note simple"><p>非常感谢!!!</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;欢迎来到我的博客&quot;&gt;&lt;a href=&quot;#欢迎来到我的博客&quot; class=&quot;headerlink&quot; title=&quot;欢迎来到我的博客!!!&quot;&gt;&lt;/a&gt;欢迎来到我的博客!!!&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;所以我该写些什么？？？&lt;/strong&gt;&lt;br&gt;要不先在这里插一</summary>
      
    
    
    
    
    <category term="首页" scheme="http://example.com/tags/%E9%A6%96%E9%A1%B5/"/>
    
  </entry>
  
</feed>
